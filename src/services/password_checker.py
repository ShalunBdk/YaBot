from yandex_bot import Client, Button
from datetime import datetime
import time
import pytz
import logging
from typing import Dict
from queue import Queue as Queue, Empty as QueueEmpty

class PasswordExpiryChecker:
    def __init__(self, bot, ad_connector, utilities):
        self.bot = bot
        self.ad = ad_connector
        self.utils = utilities
        self.moscow_tz = pytz.timezone('Europe/Moscow')
        self.logger = logging.getLogger(__name__)
        self.notification_queue = Queue()
        
    def check_expiring_passwords(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            expiring_users = self.ad.get_users_with_expiring_passwords(days=7)
            for user in expiring_users:
                try:
                    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    expiry_date = datetime.strptime(user['password_expiry_date'], "%d.%m.%Y")
                    now = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
                    days_remaining = (expiry_date - now).days
                    notification_data = {
                        'username': user['username'],
                        'display_name': user['display_name'],
                        'days_remaining': days_remaining,
                        'expiry_date': user['password_expiry_date']
                    }
                    self.notification_queue.put(notification_data)
                        
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['username']}: {e}")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏: {e}")

    def _send_notification(self, user_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            days_word = self._get_days_word(user_data['days_remaining'])
            
            message = (
                f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è\n\n"
                f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {user_data['display_name']}!\n\n"
                f"–í–∞—à –ø–∞—Ä–æ–ª—å –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {user_data['days_remaining']} {days_word} "
                f"({user_data['expiry_date']}).\n\n"
            )
            
            self.bot.send_message(
                message,
                f'{user_data['username']}@tion.ru',
                inline_keyboard=[
                    Button(text="üîê –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å?", phrase="reset_password_instruction"),
                    Button(text="üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è", phrase="self_res_pass")
                ]
            )
            
            self.logger.info(
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['username']} "
                f"(–¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {user_data['days_remaining']} –¥–Ω–µ–π)"
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['username']}: {e}")

    def _get_days_word(self, days: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–¥–µ–Ω—å'"""
        if days in [1]:
            return "–¥–µ–Ω—å"
        elif days in [2, 3, 4]:
            return "–¥–Ω—è"
        else:
            return "–¥–Ω–µ–π"

    def process_notification_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                user_data = self.notification_queue.get(timeout=1)
                self._send_notification(user_data)
                self.notification_queue.task_done()
            except QueueEmpty:
                time.sleep(1)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")