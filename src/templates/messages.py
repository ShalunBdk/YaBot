from datetime import datetime, timedelta
import logging
from yandex_bot import Client, Button

from exceptions import AccessException

from services.ad_service import ADConnector
from services.utils import Utilities
from services.yandex_service import Yandex360

class Template:
    def __init__(
            self,
            bot: Client,
            ya360: Yandex360,
            utils: Utilities,
            ad: ADConnector
        ):
        self.bot = bot
        self.ya360 = ya360
        self.utils = utils
        self.ad = ad
        self.session = {}
        self.admin_main_menu = [
            Button(text="‚ùî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", phrase="info"),
            Button(text="üîë –ø–∞—Ä–æ–ª—å", phrase="password"),
            Button(text="üîç —è–Ω–¥–µ–∫—Å", phrase="yandex_menu"),
            Button(text="üõÇ active directory", phrase="ad_menu"),
        ]

        self.yandex_menu = [
            Button(text="üöß –ö–æ–ª-–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", phrase="yandex_blocked_users"),
            Button(text="‚ùé –°–±—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –¥–ª—è 2FA —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", phrase="disable_2fa_phone"),
            Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
        ]

        self.ad_menu = [
            Button(text="üîê –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–∞—Ä–æ–ª–∏", phrase="expiring_passwords"),
            Button(text="üíÄ –∏—Å—Ç–µ–∫—à–∏–µ –ø–∞—Ä–æ–ª–∏", phrase="expired_passwords"),
            Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
        ]

        self.user_main_menu = [
            Button(text="‚ùî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", phrase="info"),
            Button(text="üîë –ø–∞—Ä–æ–ª—å", phrase="password"),
            Button(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é / üêû –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ", phrase="send_idea"),
        ]
    
    def get_session(self, user_id):
        if user_id not in self.session:
            self.session[user_id] = {}
        return self.session[user_id]

    def clear_session(self, user_id):
        if user_id in self.session:
            del self.session[user_id]

    def _send_admin_protected_message(self, user_login: str, message: str, keyboard=None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∞
        """
        try:
            self.ad.check_admin(user_login)
            self.bot.send_message(
                message,
                user_login,
                inline_keyboard=keyboard or self.admin_main_menu
            )
        except AccessException:
            self.bot.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                user_login,
                inline_keyboard=self.user_main_menu
            )

    def _format_user_info(self, last_password_change: str, created_at: str, last_logon: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            last_change_date = datetime.strptime(last_password_change, "%d.%m.%Y %H:%M")
            expiry_date = last_change_date + timedelta(days=90)
            days_remaining = (expiry_date - datetime.now()).days

            base_message = f"–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω {self.utils.format_utc_to_moscow(created_at)}(MSK)\n\n"
            base_message += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {self.utils.format_utc_to_moscow(last_logon)}(MSK)\n\n"
            base_message += f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è: {last_password_change}(UTC)."

            if days_remaining > 0:
                return f"{base_message}\n–ü–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ {days_remaining} –¥–Ω–µ–π."
            elif days_remaining == 0:
                return f"{base_message}\n–ü–∞—Ä–æ–ª—å –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è."
            else:
                return f"{base_message}\n–ü–∞—Ä–æ–ª—å –∏—Å—Ç—ë–∫."
        except ValueError:
            return f"–û—à–∏–±–∫–∞: {last_password_change}"

    def _format_password_info(self, last_password_change: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            last_change_date = datetime.strptime(last_password_change, "%d.%m.%Y %H:%M")
            expiry_date = last_change_date + timedelta(days=90)
            days_remaining = (expiry_date - datetime.now()).days

            base_message = f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è: {last_password_change}(UTC)."

            if days_remaining > 0:
                return f"{base_message}\n–ü–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ {days_remaining} –¥–Ω–µ–π."
            elif days_remaining == 0:
                return f"{base_message}\n–ü–∞—Ä–æ–ª—å –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è."
            else:
                return f"{base_message}\n–ü–∞—Ä–æ–ª—å –∏—Å—Ç—ë–∫."
        except ValueError:
            return f"–û—à–∏–±–∫–∞: {last_password_change}"

    def show_info(self, user_login: str) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –±–æ—Ç–∞
        """
        is_support = self.ad.user_in_group(
            user_login.split("@")[0],
            "CN=IT –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞,OU=Security Groups,OU=MyBusiness,DC=tion,DC=local",
        )
        
        if is_support:
            message = ("\n\n–≠—Ç–æ –±–æ—Ç IT –°–ª—É–∂–±—ã, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã."
                      "\n\n__–ï—Å–ª–∏ –±–æ—Ç –≤–∞–º –æ—Ç–≤–µ—á–∞–µ—Ç –∑–Ω–∞—á–∏—Ç –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ IT –≤ Active Directory__"
                      "\n\n**–ö–æ–º–∞–Ω–¥—ã:**"
                      "```üîë –ø–∞—Ä–æ–ª—å``` –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å"
                      "```–í—ã–±–æ—Ä —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ @``` –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∏—Ç—å –µ–º—É –ø–∞—Ä–æ–ª—å, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ–º—É –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä"
                      "```üîç —è–Ω–¥–µ–∫—Å``` —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —è–Ω–¥–µ–∫—Å–æ–º(—Å–±—Ä–æ—Å–∏—Ç—å 2FA, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ AD, –Ω–æ –æ—Å—Ç–∞—é—â–∏—Ö—Å—è –≤ —è–Ω–¥–µ–∫—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
                      "```üõÇ active directory``` —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AD(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø–∞—Ä–æ–ª—å)")
            keyboard = self.admin_main_menu
        else:
            message = ("\n\n–≠—Ç–æ –±–æ—Ç IT –°–ª—É–∂–±—ã, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –∏ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                      "\n\n**–ö–æ–º–∞–Ω–¥—ã:**"
                      "\n\n```üîë –ø–∞—Ä–æ–ª—å``` - –ø–æ–∫–∞–∂–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –ø–∞—Ä–æ–ª—è"
                      "\n\n```üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é / üêû –°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–µ``` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")
            keyboard = self.user_main_menu
            
        self.bot.send_message(message, user_login, inline_keyboard=keyboard)

    def show_employee_info(self, message) -> None:
        try:
            self.ad.check_admin(message.user.login)
            try:
                account_name = message.text.split("@")[1]
            except ValueError:
                account_name = message.text.split("@")[0]
            info = {
                'last_password_change': self.ad.get_password_expiry_date(account_name),
                'created_at': self.ad.get_account_creation_date(account_name),
                'last_logon': self.ad.get_last_logon(account_name)
            }
            
            formatted_message = self._format_user_info(**info)
            session = self.get_session(message.user.login)
            session['account_name'] = account_name
            self.bot.send_message(
                formatted_message,
                message.user.login,
                inline_keyboard=[
                    Button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å", phrase="reset_password_step"),
                    Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
                ]
            )
        except AccessException as e:
            self.bot.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                message.user.login,
                inline_keyboard=self.user_main_menu
            )

    def reset_password_step(self, message):
        session = self.get_session(message.user.login)
        account_name = session.get('account_name')
        self.bot.send_message(
            f'–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å {account_name}?',
            message.user.login,
            inline_keyboard=[
                Button(text="‚úÖ –î–∞", phrase="reset_password_finally"),
                Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
            ]
        )

    def reset_password_finally(self, message):
        session = self.get_session(message.user.login)
        account_name = session.get('account_name')
        password = self.utils.generate_random_string()
        session['password'] = password
        self.ad.change_password(account_name, password)
        self.bot.send_message(
            f'–ü–∞—Ä–æ–ª—å {account_name} —Å–±—Ä–æ—à–µ–Ω –Ω–∞ **{password}**\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å {account_name} –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä?',
            message.user.login,
            inline_keyboard=[
                Button(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å", phrase="reset_password_notify"),
                Button(text="‚ùå –ù–µ—Ç", phrase="main_menu"),
            ]
        )
        logging.info(f'{message.user.login} —Å–±—Ä–æ—Å–∏–ª –ø–∞—Ä–æ–ª—å –¥–ª—è {account_name}')

    def reset_password_notify(self, message):
        session = self.get_session(message.user.login)
        account_name = session.get('account_name')
        password = session.get('password')
        self.clear_session(message.user.login)
        self.bot.send_message(
            f'–í–∞—à –ø–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.user.login}\n–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å **{password}**',
            f'{account_name}@tion.ru',
            inline_keyboard=self.user_main_menu
        )
        self.bot.send_message(
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            message.user.login,
            inline_keyboard=self.admin_main_menu
        )

    def show_password_info(self, message) -> None:
        info = {
            'last_password_change': self.ad.get_password_expiry_date(message.user.login.split("@")[0])
        }
        formatted_message = self._format_password_info(**info)
        self.bot.send_message(
            formatted_message,
            message.user.login,
            inline_keyboard=[
                    Button(text="üîê –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å?", phrase="reset_password_instruction"),
                    Button(text="üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è", phrase="self_res_pass"),
                    Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
                ]
        )
    
    def reset_password_instruction(self, message):
        self.bot.send_message(
            '–í—ã —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –æ—Ñ–∏—Å–µ –∏–ª–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ?',
            message.user.login,
            inline_keyboard=[
                Button(text="üè¢ –û—Ñ–∏—Å", phrase="reset_password_instruction_office"),
                Button(text="üèòÔ∏è –£–¥–∞–ª—ë–Ω–∫–∞", phrase="reset_password_instruction_remote"),
                Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
            ]
        )

    def reset_password_instruction_office(self, message):
        is_support = self.ad.user_in_group(
            message.user.login.split("@")[0],
            "CN=IT –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞,OU=Security Groups,OU=MyBusiness,DC=tion,DC=local",
        )
        if is_support:
            keyboard = self.admin_main_menu
        else:
            keyboard = self.user_main_menu
        self.bot.send_message(
            '–ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ —Å–≤–æ–∏–º —Ä–∞–±–æ—á–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º, –Ω–∞–∂–º–∏—Ç–µ **Ctrl + Alt + Del** –∏ –≤—ã–±–µ—Ä–∏—Ç–µ **–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å**.\
                \n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º [Wiki](https://wiki.yandex.ru/homepage/wiki-it-service/change-pas-rdp/)',
            message.user.login,
            inline_keyboard=keyboard
        )

    def reset_password_instruction_remote(self, message):
        is_support = self.ad.user_in_group(
            message.user.login.split("@")[0],
            "CN=IT –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞,OU=Security Groups,OU=MyBusiness,DC=tion,DC=local",
        )
        if is_support:
            keyboard = self.admin_main_menu
        else:
            keyboard = self.user_main_menu
        self.bot.send_message(
            '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ **Ctrl + Alt + End**, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å".\
                \n\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –≤ –æ—Ñ–∏—Å–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ [Wiki](https://wiki.yandex.ru/homepage/wiki-it-service/change-pas-rdp/)\
                \n\n__`–ï—Å–ª–∏ —É –≤–∞—Å –Ω–∞ –Ω–æ—É—Ç–±—É–∫–µ –Ω–µ—Ç –∫–ª–∞–≤–∏—à–∏ END, –≤–±–µ–π—Ç–µ –≤ –ª—é–±–æ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ —Å–ª–æ–≤–∞ "END KEY" –∏ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –Ω–æ—É—Ç–±—É–∫–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä, END KEY HUAWEI)`__',
            message.user.login,
            inline_keyboard=keyboard
        )

    def self_res_pass(self, message):
        self.bot.send_message(
            '–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π?',
            message.user.login,
            inline_keyboard=[
                Button(text="‚úÖ –î–∞", phrase="self_reset_pass_finally"),
                Button(text="‚ùå –û—Ç–º–µ–Ω–∞", phrase="main_menu"),
            ]
        )

    def self_reset_pass_finally(self, message):
        is_support = self.ad.user_in_group(
            message.user.login.split("@")[0],
            "CN=IT –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞,OU=Security Groups,OU=MyBusiness,DC=tion,DC=local",
        )
        if is_support:
            keyboard = self.admin_main_menu
        else:
            keyboard = self.user_main_menu
        password = self.utils.generate_random_string()
        self.ad.change_password(message.user.login.split("@")[0], password)
        self.bot.send_message(
            f'–í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å **{password}**',
            message.user.login,
            inline_keyboard=keyboard
        )
        logging.info(f'{message.user.login} —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø–∞—Ä–æ–ª—å')

    def disable_2fa_yandex(self, message):
        try:
            self.ad.check_admin(message.user.login)
            username = message.text.split("@", 1)[1]
            
            if not self.ya360.has_2fa(username):
                response = f"–£ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            else:
                try:
                    user_id = self.ya360.get_user_by_nickname(username)
                    if user_id:
                        response = self.ya360.disable_2fa(user_id)
                    else:
                        response = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                except Exception as e:
                    response = f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA: {e}"
            self.bot.send_message(
                response,
                message.user.login,
                inline_keyboard=self.admin_main_menu
            )
        except AccessException as e:
            self.bot.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                message.user.login,
                inline_keyboard=self.user_main_menu
            )
        except IndexError as e:
            self.bot.send_message(
                f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ 2FA: {e}",
                message.user.login,
                inline_keyboard=self.admin_main_menu
            )

    def send_idea_finally(self, message):
        self.bot.send_message(
            f'üí° –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.user.login}'
            f'\n\n{message.text}',
            chat_id='0/0/7a69ddd0-8e49-4f1a-966d-927fc89ddb89'
        )
        self.bot.send_message(
            '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            message.user.login,
            inline_keyboard=self.user_main_menu
        )

    def _format_expired_users_list(self, users: list) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
        """
        sort_users = sorted(
            users,
            key=lambda x: datetime.strptime(x["password_expiry_date"], "%d.%m.%Y"),
        )
        
        reply_text = "üîÅ - —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n\n"
        
        for user in sort_users:
            if ("OU=Service,OU=ya360,OU=SBSUsers,OU=Users,OU=MyBusiness,DC=tion,DC=local"
                not in str(user["distinguished_name"])):
                
                username = user['username']
                expiry_date = user['password_expiry_date']
                
                if user["userAccountControl"] == 66048:
                    reply_text += f"**{username}** –∏—Å—Ç–µ–∫ {expiry_date} üîÅ\n\n"
                else:
                    reply_text += f"**{username}** –∏—Å—Ç–µ–∫ {expiry_date}\n\n"
                    
        return reply_text

    def _format_expiring_users_list(self, users: list) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
        """
        sort_users = sorted(
            users,
            key=lambda x: datetime.strptime(x["password_expiry_date"], "%d.%m.%Y"),
        )
        
        reply_text = ""
        for user in sort_users:
            username = user['username']
            expiry_date = user['password_expiry_date']
            reply_text += f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}** –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_date}\n\n"
                    
        return reply_text

    def show_users_with_expired_passwords(self, user_login: str):
        users = self.ad.get_users_with_expired_passwords()
        formatted_users = self._format_expired_users_list(users)
        self._send_admin_protected_message(user_login, formatted_users)

    def show_users_with_expiring_passwords(self, user_login: str):
        users = self.ad.get_users_with_expiring_passwords()
        formatted_users = self._format_expiring_users_list(users)
        self._send_admin_protected_message(user_login, formatted_users)

    def show_yandex_blocked_users(self, user_login: str):
        self._send_admin_protected_message(
            user_login,
            self.ya360.view_blocked_users()
        )